Data Structures = ways to store data
Algorithms = ways to use data structures to write programs

Data Structures + Algorithms = Programs

------------------------------------------------------------

Big O Cheat Sheet:

- Big O Notations:
  - O(1) CONSTANT => No Loops in the function.

  - O(log N) LOGARITHMIC => usually searching algorithms have log(n) if 
    they are sorted, such as Binary Search (***not on hash maps though).

  - O(n) LINEAR => "For" Loops; "While" Loops.

  - O(n * log (n)) LOG LINEAR => Sorting operations usually.

  - O(n^2) QUADRATIC => every element in a collection needs to tbe 
    compared to every other element (i.e. - 2 nested loops).

  - O(2^N) EXPONENTIAL => recursive algorithms that solve a problem of
    size N.
  
  - O(n!) FACTORIAL => you are adding a loop for every element (not
    encountered very often).

  ****Iterating through half a collection is still O(n) because 
      O(n/2) => O(n)
  ****Two separate collections: O(a + b)

- What causes time complexity in a function?
  - Operations (+, -, *, /)
  - Comparisons (<, >, ==) 
  - Looping (for, while)
  - Outside function call (function())

- What causes space complexity?
  - Variables
  - Data Structures
  - Function calls
  - Allocations

------------------------------------------------------------

- Big O Rule Book

  - Rule #1: Always calculate worst case

  - Rule #2: Remove constants

  - Rule #3: Different inputs should have different variables. O(a + b). 
    A and B arrays nested would be O(a*b).
    - Addition for steps in order
    - Multiplication for nested steps

  - Rule #4: Drop non-dominant terms

------------------------------------------------------------

- 3 Pillars of Good Code

  1) Readable
  2) Memory Efficient - Space Complexity
    a) Heap - where we store variables
    b) Stack - where we keep track of our function calls
  3) Time Efficient - Time Complexity

